const { sequelize } = require('../config/database');
const { User, YouTubeChannel } = require('../models');
const bcrypt = require('bcryptjs');

async function setupDefaultUser() {
  try {
    console.log('üîÑ Ki·ªÉm tra v√† t·∫°o user m·∫∑c ƒë·ªãnh...');
    
    // Ki·ªÉm tra xem c√≥ user n√†o kh√¥ng
    const userCount = await User.count();
    
    if (userCount === 0) {
      console.log('‚ö†Ô∏è  Kh√¥ng c√≥ user n√†o, t·∫°o user admin m·∫∑c ƒë·ªãnh...');
      
      const defaultUser = await User.create({
        username: 'admin',
        email: 'admin@gmail.com',
        password: 'admin123456',
        fullName: 'System Administrator',
        role: 'admin',
        isActive: true
      });
      
      console.log(`‚úÖ ƒê√£ t·∫°o user admin: ${defaultUser.username}`);
      console.log(`üìß Email: ${defaultUser.email}`);
      console.log(`üîë Password: admin123456`);
      console.log('‚ö†Ô∏è  Vui l√≤ng ƒë·ªïi password sau khi ƒëƒÉng nh·∫≠p!');
      
      return defaultUser;
    } else {
      // L·∫•y user admin ƒë·∫ßu ti√™n
      const adminUser = await User.findOne({
        where: { role: 'admin' },
        order: [['createdAt', 'ASC']]
      });
      
      if (adminUser) {
        console.log(`‚úÖ T√¨m th·∫•y user admin: ${adminUser.username}`);
        return adminUser;
      } else {
        // L·∫•y user ƒë·∫ßu ti√™n
        const firstUser = await User.findOne({
          order: [['createdAt', 'ASC']]
        });
        
        console.log(`‚úÖ S·ª≠ d·ª•ng user ƒë·∫ßu ti√™n: ${firstUser.username}`);
        return firstUser;
      }
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh setup default user:', error);
    throw error;
  }
}

async function assignChannelsToUser(userId) {
  try {
    console.log(`üîÑ G√°n channels cho user ${userId}...`);
    
    // ƒê·∫øm channels ch∆∞a c√≥ userId
    const channelsWithoutOwner = await YouTubeChannel.count({
      where: { userId: null }
    });
    
    if (channelsWithoutOwner === 0) {
      console.log('‚úÖ T·∫•t c·∫£ channels ƒë√£ c√≥ owner');
      return;
    }
    
    console.log(`üìä T√¨m th·∫•y ${channelsWithoutOwner} channels ch∆∞a c√≥ owner`);
    
    // Update t·∫•t c·∫£ channels ch∆∞a c√≥ userId
    await YouTubeChannel.update(
      { userId: userId },
      { 
        where: { 
          userId: null 
        } 
      }
    );
    
    console.log(`‚úÖ ƒê√£ g√°n ${channelsWithoutOwner} channels cho user`);
    
  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh g√°n channels:', error);
    throw error;
  }
}

async function setupDatabase() {
  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu setup database...');
    
    // Sync database
    await sequelize.sync({ alter: true });
    console.log('‚úÖ Database ƒë√£ ƒë∆∞·ª£c sync');
    
    // Setup default user
    const defaultUser = await setupDefaultUser();
    
    // G√°n channels cho user
    await assignChannelsToUser(defaultUser.id);
    
    console.log('üéâ Setup database ho√†n th√†nh!');
    
    return {
      success: true,
      defaultUser: {
        id: defaultUser.id,
        username: defaultUser.username,
        email: defaultUser.email,
        role: defaultUser.role
      }
    };
    
  } catch (error) {
    console.error('‚ùå Setup database th·∫•t b·∫°i:', error);
    throw error;
  }
}

// Ch·∫°y setup n·∫øu file ƒë∆∞·ª£c execute tr·ª±c ti·∫øp
if (require.main === module) {
  setupDatabase()
    .then((result) => {
      console.log('\nüéâ Setup completed successfully!');
      console.log(`üë§ Default user: ${result.defaultUser.username}`);
      console.log(`üìß Email: ${result.defaultUser.email}`);
      console.log(`üîë Role: ${result.defaultUser.role}`);
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Setup failed:', error);
      process.exit(1);
    });
}

module.exports = { setupDatabase, setupDefaultUser, assignChannelsToUser }; 