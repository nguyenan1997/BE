openapi: 3.0.0
info:
  title: YouTube Channel Analysis API
  version: 1.0.0
  description: |
    
    API for analyzing YouTube channel screenshots using Google Gemini AI.
    
    ## User Roles:
    - **Regular Users**: Can manage their own profile and YouTube channel analyses
    - **Admin Users**: Can manage all users and access all data
    
    ## Authentication:
    All protected endpoints require a valid JWT token:
    
    ## Features:
    - YouTube channel analysis with AI
    - Scheduled data collection
    - User management
    - Real-time monitoring
servers:
  - url: http://localhost:3000
    description: Development server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        fullName:
          type: string
        role:
          type: string
          enum: [user, admin]
        isActive:
          type: boolean
        lastLoginAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    YouTubeChannel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        channelName:
          type: string
        subscriberCount:
          type: string
        totalViews:
          type: string
        estimatedRevenue:
          type: string
        watchTime:
          type: string
        views48h:
          type: string
        views60min:
          type: string
        recentVideos:
          type: array
          items:
            type: object
            properties:
              title:
                type: string
              views:
                type: string
              likes:
                type: string
              comments:
                type: string
        description:
          type: string
        category:
          type: string
        joinDate:
          type: string
        location:
          type: string
        socialLinks:
          type: object
        aiAnalysis:
          type: object
        imageUrl:
          type: string
        originalImageName:
          type: string
        analysisStatus:
          type: string
          enum: [pending, processing, completed, failed]
        analysisError:
          type: string
        monetizationWarning:
          type: boolean
        monetizationWarningReason:
          type: string
        monetizationWarningDate:
          type: string
          format: date-time
        communityGuidelinesWarning:
          type: boolean
        communityGuidelinesWarningReason:
          type: string
        communityGuidelinesWarningDate:
          type: string
          format: date-time
        warnings:
          type: object
        analyzedBy:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Schedule:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        channelId:
          type: string
          format: uuid
        name:
          type: string
          example: "Daily Analysis"
        description:
          type: string
          example: "Analyze channel every day at 9 AM"
        cronExpression:
          type: string
          example: "0 9 * * *"
        isActive:
          type: boolean
          example: true
        lastRunAt:
          type: string
          format: date-time
        nextRunAt:
          type: string
          format: date-time
        runCount:
          type: integer
          example: 5
        maxRuns:
          type: integer
          nullable: true
          example: 30
        settings:
          type: object
        channel:
          $ref: '#/components/schemas/YouTubeChannel'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ScheduleCreate:
      type: object
      required: [channelId, name, scheduleType, time]
      properties:
        channelId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "Daily Analysis"
        description:
          type: string
          example: "Analyze channel every day at 9 AM"
        scheduleType:
          type: string
          enum: [minutely, hourly, daily, weekly, monthly, yearly]
          example: "daily"
        time:
          type: object
          properties:
            hour:
              type: integer
              minimum: 0
              maximum: 23
              example: 9
            minute:
              type: integer
              minimum: 0
              maximum: 59
              example: 0
            dayOfWeek:
              type: integer
              minimum: 0
              maximum: 6
              example: 1
            dayOfMonth:
              type: integer
              minimum: 1
              maximum: 31
              example: 1
            month:
              type: integer
              minimum: 1
              maximum: 12
              example: 1
        maxRuns:
          type: integer
          minimum: 1
          maximum: 1000
          example: 30
        settings:
          type: object
    ScheduleUpdate:
      type: object
      properties:
        name:
          type: string
          example: "Updated Daily Analysis"
        description:
          type: string
          example: "Updated description"
        cronExpression:
          type: string
          example: "0 10 * * *"
        isActive:
          type: boolean
          example: true
        maxRuns:
          type: integer
          minimum: 1
          maximum: 1000
          example: 20
        settings:
          type: object
    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
          example: 1
        limit:
          type: integer
          description: Number of items per page
          example: 10
        total:
          type: integer
          description: Total number of items
          example: 25
        totalPages:
          type: integer
          description: Total number of pages
          example: 3
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
        errors:
          type: array
          items:
            type: string
          description: Array of validation errors
        error:
          type: string
          description: Detailed error message
paths:
  # ========================================
  # 🔓 PUBLIC ENDPOINTS (No Authentication)
  # ========================================
  /health:
    get:
      summary: Health check
      description: Check if the server is running
      tags: [🔓 Public]
      responses:
        200:
          description: Server is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  message:
                    type: string
                    example: "Server is running"
                  timestamp:
                    type: string
                    format: date-time
                  swagger:
                    type: string
                    example: "http://localhost:3000/api-docs"

  # ========================================
  # 👤 AUTHENTICATION ENDPOINTS
  # ========================================
  /api/auth/register:
    post:
      summary: Register new user (Admin Only)
      description: Create a new user account (only admins can register new users)
      tags: [🔒 Admin Only]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, email, password, fullName]
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 50
                  pattern: '^[a-zA-Z0-9_]+$'
                  example: "john_doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  minLength: 6
                  maxLength: 100
                  example: "password123"
                fullName:
                  type: string
                  maxLength: 100
                  example: "John Doe"
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User registered successfully. User can now login with their credentials."
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      summary: Login user
      description: Authenticate user and get JWT token
      tags: [👤 Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Login successful"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      token:
                        type: string
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/profile:
    get:
      summary: Get user profile
      description: Get current user's profile information
      tags: [👤 Authentication]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/refresh:
    post:
      summary: Refresh JWT token
      description: Get a new JWT token using current token
      tags: [👤 Authentication]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      token:
                        type: string
        401:
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/logout:
    post:
      summary: Logout user
      description: |
        Logout current user session. 
        
        **Note**: For complete security, also delete the token from your client-side storage (localStorage/sessionStorage).
      tags: [👤 Authentication]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Logout successful. Please delete the token from your client."
        400:
          description: No token provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/logout-all:
    post:
      summary: Logout all sessions
      description: |
        Logout user from all devices/sessions.
        
        **Note**: This will invalidate all tokens for the current user across all devices.
      tags: [👤 Authentication]
      security:
        - bearerAuth: []
      responses:
        200:
          description: All sessions logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "All sessions logged out successfully"
        401:
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ========================================
  # 🔒 ADMIN-ONLY ENDPOINTS
  # ========================================
  /api/users:
    get:
      summary: Get all users (Admin Only)
      description: Retrieve list of all users in the system
      tags: [🔒 Admin Only]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Items per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      pagination:
                        type: object
                        properties:
                          currentPage:
                            type: integer
                          totalPages:
                            type: integer
                          totalItems:
                            type: integer
                          itemsPerPage:
                            type: integer
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/search:
    get:
      summary: Search users (Admin Only)
      description: Search users by username, email, or full name
      tags: [🔒 Admin Only]
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          description: Search query
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Items per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      pagination:
                        type: object
                        properties:
                          currentPage:
                            type: integer
                          totalPages:
                            type: integer
                          totalItems:
                            type: integer
                          itemsPerPage:
                            type: integer
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{id}/toggle-status:
    patch:
      summary: Toggle user status (Admin Only)
      description: Activate or deactivate a user account
      tags: [🔒 Admin Only]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        200:
          description: User status toggled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User status updated successfully"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{id}:
    delete:
      summary: Delete user (Admin Only)
      description: Permanently delete a user account
      tags: [🔒 Admin Only]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        200:
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User deleted successfully"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ========================================
  # 🔐 MIXED PERMISSION ENDPOINTS
  # ========================================
  /api/users/{id}:
    get:
      summary: Get user by ID
      description: |
        - **Regular Users**: Can only view their own profile
        - **Admin Users**: Can view any user's profile
      tags: [🔐 Mixed Permissions]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        200:
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Can only view own profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update user
      description: |
        - **Regular Users**: Can only update their own profile
        - **Admin Users**: Can update any user's profile
      tags: [🔐 Mixed Permissions]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 50
                  pattern: '^[a-zA-Z0-9_]+$'
                email:
                  type: string
                  format: email
                fullName:
                  type: string
                  maxLength: 100
                password:
                  type: string
                  minLength: 6
                  maxLength: 100
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User updated successfully"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Can only update own profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ========================================
  # 👤 USER YOUTUBE ANALYSIS ENDPOINTS
  # ========================================
  /api/youtube/analyze:
    post:
      summary: Analyze YouTube channel from image URLs
      description: Start AI analysis of YouTube channel from image URLs (not file upload)
      tags: [👤 YouTube Analysis]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                imageUrls:
                  type: array
                  items:
                    type: string
                    format: uri
                  description: Array of image URLs to analyze
                  example:
                    - "https://example.com/youtube-channel-main.jpg"
                    - "https://example.com/youtube-channel-stats.jpg"
                    - "https://example.com/youtube-channel-videos.jpg"
      responses:
        202:
          description: Analysis started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Images fetched and analysis started"
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      status:
                        type: string
                        example: "processing"
                      message:
                        type: string
                        example: "AI analysis is in progress. Check status later."
                      imageCount:
                        type: integer
                      imageUrls:
                        type: array
                        items:
                          type: string
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/youtube/analyze-url:
    post:
      summary: Analyze YouTube channel from URL
      description: |
        Analyze YouTube channel by providing channel URL. The system will:
        1. Call external API to fetch channel images and basic info
        2. Download images from external API
        3. Use Gemini AI to analyze the images
        4. Combine external API data with AI analysis results
      tags: [👤 YouTube Analysis]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [channelUrl]
              properties:
                channelUrl:
                  type: string
                  format: uri
                  description: YouTube channel URL (e.g., https://www.youtube.com/@channelname)
                  example: "https://www.youtube.com/@PewDiePie"
      responses:
        202:
          description: Channel analysis started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Channel analysis started"
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      status:
                        type: string
                        example: "processing"
                      message:
                        type: string
                        example: "Fetching channel images and starting AI analysis. Check status later."
                      channelUrl:
                        type: string
                        example: "https://www.youtube.com/@PewDiePie"
        400:
          description: Invalid YouTube URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/youtube/status/{id}:
    get:
      summary: Get analysis status
      description: Check the status of a YouTube channel analysis
      tags: [👤 YouTube Analysis]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Analysis ID
      responses:
        200:
          description: Status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      status:
                        type: string
                        enum: [pending, processing, completed, failed]
                      channelName:
                        type: string
                      imageUrl:
                        type: string
                      error:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
                      updatedAt:
                        type: string
                        format: date-time
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Analysis not found or access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/youtube/result/{id}:
    get:
      summary: Get analysis results
      description: Get completed analysis results for a YouTube channel
      tags: [👤 YouTube Analysis]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Analysis ID
      responses:
        200:
          description: Results retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/YouTubeChannel'
        400:
          description: Analysis not completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Analysis is processing. Please wait or check status."
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                      error:
                        type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Analysis not found or access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/youtube/channels:
    get:
      summary: Get user's YouTube channels
      description: Get list of all YouTube channel analyses for the authenticated user
      tags: [👤 YouTube Analysis]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Items per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Channels retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      channels:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            channelName:
                              type: string
                            analysisStatus:
                              type: string
                              enum: [pending, processing, completed, failed]
                            imageUrl:
                              type: string
                            createdAt:
                              type: string
                              format: date-time
                            updatedAt:
                              type: string
                              format: date-time
                      pagination:
                        type: object
                        properties:
                          currentPage:
                            type: integer
                          totalPages:
                            type: integer
                          totalItems:
                            type: integer
                          itemsPerPage:
                            type: integer
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Add YouTube channel manually
      description: Add a new YouTube channel without AI analysis (manual entry)
      tags: [👤 YouTube Analysis]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [channelName]
              properties:
                channelName:
                  type: string
                  description: Name of the YouTube channel
                  example: "PewDiePie"
                subscriberCount:
                  type: string
                  description: Number of subscribers
                  example: "111M"
                totalViews:
                  type: string
                  description: Total views on the channel
                  example: "28.5B"
                estimatedRevenue:
                  type: string
                  description: Estimated monthly revenue
                  example: "$50K - $100K"
                watchTime:
                  type: string
                  description: Total watch time
                  example: "2.5B hours"
                views48h:
                  type: string
                  description: Views in last 48 hours
                  example: "500K"
                views60min:
                  type: string
                  description: Views in last 60 minutes
                  example: "10K"
                description:
                  type: string
                  description: Channel description
                  example: "Gaming and entertainment channel"
                category:
                  type: string
                  description: Channel category
                  example: "Gaming"
                joinDate:
                  type: string
                  description: When the channel was created
                  example: "Apr 29, 2010"
                location:
                  type: string
                  description: Channel location
                  example: "United States"
                socialLinks:
                  type: object
                  description: Social media links
                  example:
                    twitter: "https://twitter.com/pewdiepie"
                    instagram: "https://instagram.com/pewdiepie"
                imageUrl:
                  type: string
                  description: Channel banner or profile image URL
                  example: "https://example.com/channel-image.jpg"
                monetizationWarning:
                  type: boolean
                  description: Whether channel has monetization warnings
                  example: false
                monetizationWarningReason:
                  type: string
                  description: Reason for monetization warning
                  example: ""
                communityGuidelinesWarning:
                  type: boolean
                  description: Whether channel has community guidelines warnings
                  example: false
                communityGuidelinesWarningReason:
                  type: string
                  description: Reason for community guidelines warning
                  example: ""
      responses:
        201:
          description: Channel added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "YouTube channel added successfully"
                  data:
                    $ref: '#/components/schemas/YouTubeChannel'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/youtube/channels/{id}:
    delete:
      summary: Delete YouTube channel analysis
      description: Delete a YouTube channel analysis and associated files
      tags: [👤 YouTube Analysis]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Analysis ID
      responses:
        200:
          description: Analysis deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "YouTube channel deleted successfully"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Analysis not found or access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ========================================
  # 📅 SCHEDULE ENDPOINTS
  # ========================================
  /api/schedules:
    get:
      summary: Get user schedules
      tags: [📅 Schedule Management]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive]
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Schedule'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create schedule
      description: Create a new schedule with time information
      tags: [📅 Schedule Management]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleCreate'
            examples:
              minutely:
                summary: Minutely schedule
                value:
                  channelId: "123e4567-e89b-12d3-a456-426614174000"
                  name: "Minutely Analysis"
                  description: "Analyze channel every minute"
                  scheduleType: "minutely"
                  time: {}
                  maxRuns: 100
                  settings:
                    notifyOnComplete: true
              hourly:
                summary: Hourly schedule
                value:
                  channelId: "123e4567-e89b-12d3-a456-426614174000"
                  name: "Hourly Analysis"
                  description: "Analyze channel every hour"
                  scheduleType: "hourly"
                  time: {}
                  maxRuns: 24
                  settings:
                    notifyOnComplete: true
              daily:
                summary: Daily schedule
                value:
                  channelId: "123e4567-e89b-12d3-a456-426614174000"
                  name: "Daily Analysis"
                  description: "Analyze channel every day at 9 AM"
                  scheduleType: "daily"
                  time:
                    hour: 9
                    minute: 0
                  maxRuns: 30
                  settings:
                    notifyOnComplete: true
              weekly:
                summary: Weekly schedule
                value:
                  channelId: "123e4567-e89b-12d3-a456-426614174000"
                  name: "Weekly Analysis"
                  description: "Analyze channel every Monday at 9 AM"
                  scheduleType: "weekly"
                  time:
                    hour: 9
                    minute: 0
                    dayOfWeek: 1
                  maxRuns: 52
                  settings:
                    notifyOnComplete: true
              monthly:
                summary: Monthly schedule
                value:
                  channelId: "123e4567-e89b-12d3-a456-426614174000"
                  name: "Monthly Analysis"
                  description: "Analyze channel on 1st of every month at 9 AM"
                  scheduleType: "monthly"
                  time:
                    hour: 9
                    minute: 0
                    dayOfMonth: 1
                  maxRuns: 12
                  settings:
                    notifyOnComplete: true
              yearly:
                summary: Yearly schedule
                value:
                  channelId: "123e4567-e89b-12d3-a456-426614174000"
                  name: "Yearly Analysis"
                  description: "Analyze channel on January 1st at 9 AM"
                  scheduleType: "yearly"
                  time:
                    hour: 9
                    minute: 0
                    dayOfMonth: 1
                    month: 1
                  maxRuns: 5
                  settings:
                    notifyOnComplete: true
      responses:
        201:
          description: Schedule created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Schedule'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/schedules/{id}:
    put:
      summary: Update schedule
      tags: [📅 Schedule Management]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleUpdate'
      responses:
        200:
          description: Schedule updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Schedule'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete schedule
      tags: [📅 Schedule Management]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Schedule deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/schedules/{id}/toggle:
    patch:
      summary: Toggle schedule status
      tags: [📅 Schedule Management]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Status toggled
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      isActive:
                        type: boolean
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/schedules/{id}/run:
    post:
      summary: Run schedule now
      tags: [📅 Schedule Management]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Schedule executed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

tags:
  - name: 🔓 Public
    description: Public endpoints - no authentication required
  - name: 👤 Authentication
    description: User authentication and authorization
  - name: 👤 YouTube Analysis
    description: YouTube channel analysis with AI (user operations)
  - name: 📅 Schedule Management
    description: Schedule management for automated data collection
  - name: 🔒 Admin Only
    description: Admin-only endpoints for user management
  - name: 🔐 Mixed Permissions
    description: Endpoints with different permissions for users vs admins 