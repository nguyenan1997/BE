openapi: 3.0.0
info:
  title: YouTube Channel Analysis API
  version: 1.0.0
  description: |
    
    API for analyzing YouTube channel screenshots using Google Gemini AI.
    
    ## User Roles:
    - **Regular Users**: Can manage their own profile and YouTube channel analyses
    - **Admin Users**: Can manage all users and access all data
    
    ## Authentication:
    All protected endpoints require a valid JWT token:
servers:
  - url: http://localhost:3000
    description: Development server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        fullName:
          type: string
        role:
          type: string
          enum: [user, admin]
        isActive:
          type: boolean
        lastLoginAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    YouTubeChannel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        channelName:
          type: string
        subscriberCount:
          type: string
        totalViews:
          type: string
        estimatedRevenue:
          type: string
        watchTime:
          type: string
        views48h:
          type: string
        views60min:
          type: string
        recentVideos:
          type: array
          items:
            type: object
            properties:
              title:
                type: string
              views:
                type: string
              likes:
                type: string
              comments:
                type: string
        description:
          type: string
        category:
          type: string
        joinDate:
          type: string
        location:
          type: string
        socialLinks:
          type: object
        aiAnalysis:
          type: object
        imageUrl:
          type: string
        originalImageName:
          type: string
        analysisStatus:
          type: string
          enum: [pending, processing, completed, failed]
        analysisError:
          type: string
        monetizationWarning:
          type: boolean
        monetizationWarningReason:
          type: string
        monetizationWarningDate:
          type: string
          format: date-time
        communityGuidelinesWarning:
          type: boolean
        communityGuidelinesWarningReason:
          type: string
        communityGuidelinesWarningDate:
          type: string
          format: date-time
        warnings:
          type: object
        analyzedBy:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
paths:
  # ========================================
  # 🔓 PUBLIC ENDPOINTS (No Authentication)
  # ========================================
  /health:
    get:
      summary: Health check
      description: Check if the server is running
      tags: [🔓 Public]
      responses:
        200:
          description: Server is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  message:
                    type: string
                    example: "Server is running"
                  timestamp:
                    type: string
                    format: date-time
                  swagger:
                    type: string
                    example: "http://localhost:3000/api-docs"

  # ========================================
  # 👤 AUTHENTICATION ENDPOINTS
  # ========================================
  /api/auth/register:
    post:
      summary: Register new user
      description: Create a new user account (default role: user)
      tags: [👤 Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, email, password, fullName]
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 50
                  pattern: '^[a-zA-Z0-9_]+$'
                  example: "john_doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  minLength: 6
                  maxLength: 100
                  example: "password123"
                fullName:
                  type: string
                  maxLength: 100
                  example: "John Doe"
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User registered successfully"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      token:
                        type: string
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      summary: Login user
      description: Authenticate user and get JWT token
      tags: [👤 Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Login successful"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      token:
                        type: string
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/profile:
    get:
      summary: Get user profile
      description: Get current user's profile information
      tags: [👤 Authentication]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/refresh:
    post:
      summary: Refresh JWT token
      description: Get a new JWT token using current token
      tags: [👤 Authentication]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      token:
                        type: string
        401:
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ========================================
  # 🔒 ADMIN-ONLY ENDPOINTS
  # ========================================
  /api/users:
    get:
      summary: Get all users (Admin Only)
      description: Retrieve list of all users in the system
      tags: [🔒 Admin Only]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Items per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      pagination:
                        type: object
                        properties:
                          currentPage:
                            type: integer
                          totalPages:
                            type: integer
                          totalItems:
                            type: integer
                          itemsPerPage:
                            type: integer
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/search:
    get:
      summary: Search users (Admin Only)
      description: Search users by username, email, or full name
      tags: [🔒 Admin Only]
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          description: Search query
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Items per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      pagination:
                        type: object
                        properties:
                          currentPage:
                            type: integer
                          totalPages:
                            type: integer
                          totalItems:
                            type: integer
                          itemsPerPage:
                            type: integer
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{id}/toggle-status:
    patch:
      summary: Toggle user status (Admin Only)
      description: Activate or deactivate a user account
      tags: [🔒 Admin Only]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        200:
          description: User status toggled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User status updated successfully"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{id}:
    delete:
      summary: Delete user (Admin Only)
      description: Permanently delete a user account
      tags: [🔒 Admin Only]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        200:
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User deleted successfully"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ========================================
  # 🔐 MIXED PERMISSION ENDPOINTS
  # ========================================
  /api/users/{id}:
    get:
      summary: Get user by ID
      description: |
        - **Regular Users**: Can only view their own profile
        - **Admin Users**: Can view any user's profile
      tags: [🔐 Mixed Permissions]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        200:
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Can only view own profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update user
      description: |
        - **Regular Users**: Can only update their own profile
        - **Admin Users**: Can update any user's profile
      tags: [🔐 Mixed Permissions]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 50
                  pattern: '^[a-zA-Z0-9_]+$'
                email:
                  type: string
                  format: email
                fullName:
                  type: string
                  maxLength: 100
                password:
                  type: string
                  minLength: 6
                  maxLength: 100
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User updated successfully"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Can only update own profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ========================================
  # 👤 USER YOUTUBE ANALYSIS ENDPOINTS
  # ========================================
  /api/youtube/analyze:
    post:
      summary: Analyze YouTube channel from images
      description: Start AI analysis of YouTube channel from image URLs
      tags: [👤 YouTube Analysis]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Image files to analyze
      responses:
        202:
          description: Analysis started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Images uploaded and analysis started"
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      status:
                        type: string
                        example: "processing"
                      message:
                        type: string
                        example: "AI analysis is in progress. Check status later."
                      imageCount:
                        type: integer
                      imageUrls:
                        type: array
                        items:
                          type: string
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/youtube/status/{id}:
    get:
      summary: Get analysis status
      description: Check the status of a YouTube channel analysis
      tags: [👤 YouTube Analysis]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Analysis ID
      responses:
        200:
          description: Status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      status:
                        type: string
                        enum: [pending, processing, completed, failed]
                      channelName:
                        type: string
                      imageUrl:
                        type: string
                      error:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
                      updatedAt:
                        type: string
                        format: date-time
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Analysis not found or access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/youtube/result/{id}:
    get:
      summary: Get analysis results
      description: Get completed analysis results for a YouTube channel
      tags: [👤 YouTube Analysis]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Analysis ID
      responses:
        200:
          description: Results retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/YouTubeChannel'
        400:
          description: Analysis not completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Analysis is processing. Please wait or check status."
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                      error:
                        type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Analysis not found or access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/youtube/channels:
    get:
      summary: Get user's YouTube channels
      description: Get list of all YouTube channel analyses for the authenticated user
      tags: [👤 YouTube Analysis]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Items per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Channels retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      channels:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            channelName:
                              type: string
                            analysisStatus:
                              type: string
                              enum: [pending, processing, completed, failed]
                            imageUrl:
                              type: string
                            createdAt:
                              type: string
                              format: date-time
                            updatedAt:
                              type: string
                              format: date-time
                      pagination:
                        type: object
                        properties:
                          currentPage:
                            type: integer
                          totalPages:
                            type: integer
                          totalItems:
                            type: integer
                          itemsPerPage:
                            type: integer
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Add YouTube channel manually
      description: Add a new YouTube channel without AI analysis (manual entry)
      tags: [👤 YouTube Analysis]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [channelName]
              properties:
                channelName:
                  type: string
                  description: Name of the YouTube channel
                  example: "PewDiePie"
                subscriberCount:
                  type: string
                  description: Number of subscribers
                  example: "111M"
                totalViews:
                  type: string
                  description: Total views on the channel
                  example: "28.5B"
                estimatedRevenue:
                  type: string
                  description: Estimated monthly revenue
                  example: "$50K - $100K"
                watchTime:
                  type: string
                  description: Total watch time
                  example: "2.5B hours"
                views48h:
                  type: string
                  description: Views in last 48 hours
                  example: "500K"
                views60min:
                  type: string
                  description: Views in last 60 minutes
                  example: "10K"
                description:
                  type: string
                  description: Channel description
                  example: "Gaming and entertainment channel"
                category:
                  type: string
                  description: Channel category
                  example: "Gaming"
                joinDate:
                  type: string
                  description: When the channel was created
                  example: "Apr 29, 2010"
                location:
                  type: string
                  description: Channel location
                  example: "United States"
                socialLinks:
                  type: object
                  description: Social media links
                  example:
                    twitter: "https://twitter.com/pewdiepie"
                    instagram: "https://instagram.com/pewdiepie"
                imageUrl:
                  type: string
                  description: Channel banner or profile image URL
                  example: "https://example.com/channel-image.jpg"
                monetizationWarning:
                  type: boolean
                  description: Whether channel has monetization warnings
                  example: false
                monetizationWarningReason:
                  type: string
                  description: Reason for monetization warning
                  example: ""
                communityGuidelinesWarning:
                  type: boolean
                  description: Whether channel has community guidelines warnings
                  example: false
                communityGuidelinesWarningReason:
                  type: string
                  description: Reason for community guidelines warning
                  example: ""
      responses:
        201:
          description: Channel added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "YouTube channel added successfully"
                  data:
                    $ref: '#/components/schemas/YouTubeChannel'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/youtube/channels/{id}:
    delete:
      summary: Delete YouTube channel analysis
      description: Delete a YouTube channel analysis and associated files
      tags: [👤 YouTube Analysis]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Analysis ID
      responses:
        200:
          description: Analysis deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "YouTube channel deleted successfully"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Analysis not found or access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

tags:
  - name: 🔓 Public
    description: Public endpoints - no authentication required
  - name: 👤 Authentication
    description: User authentication and authorization
  - name: 👤 YouTube Analysis
    description: YouTube channel analysis with AI (user operations)
  - name: 🔒 Admin Only
    description: Admin-only endpoints for user management
  - name: 🔐 Mixed Permissions
    description: Endpoints with different permissions for users vs admins 