openapi: 3.0.0
info:
  title: YouTube Channel Analysis API
  version: 1.0.0
  description: API for analyzing YouTube channel screenshots using Google Gemini AI
servers:
  - url: http://localhost:3000
    description: Development server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        fullName:
          type: string
        role:
          type: string
          enum: [user, admin]
        isActive:
          type: boolean
        lastLoginAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    YouTubeChannel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        channelName:
          type: string
        subscriberCount:
          type: string
        totalViews:
          type: string
        estimatedRevenue:
          type: string
        watchTime:
          type: string
        views48h:
          type: string
        views60min:
          type: string
        recentVideos:
          type: array
          items:
            type: object
            properties:
              title:
                type: string
              views:
                type: string
              likes:
                type: string
              comments:
                type: string
        description:
          type: string
        category:
          type: string
        joinDate:
          type: string
        location:
          type: string
        socialLinks:
          type: object
          description: Social media links as JSON object
        aiAnalysis:
          type: object
        imageUrl:
          type: string
        originalImageName:
          type: string
        analysisStatus:
          type: string
          enum: [pending, processing, completed, failed]
        analysisError:
          type: string
        monetizationWarning:
          type: boolean
        monetizationWarningReason:
          type: string
        monetizationWarningDate:
          type: string
          format: date-time
        communityGuidelinesWarning:
          type: boolean
        communityGuidelinesWarningReason:
          type: string
        communityGuidelinesWarningDate:
          type: string
          format: date-time
        warnings:
          type: object
        analyzedBy:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Schedule:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        channelId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        cronExpression:
          type: string
        isActive:
          type: boolean
        lastRunAt:
          type: string
          format: date-time
        nextRunAt:
          type: string
          format: date-time
        runCount:
          type: integer
        maxRuns:
          type: integer
          nullable: true
        settings:
          type: object
        channel:
          $ref: '#/components/schemas/YouTubeChannel'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ScheduleCreate:
      type: object
      required: [channelId, name, scheduleType, time]
      properties:
        channelId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "Daily Analysis"
        description:
          type: string
          example: "Analyze channel every day at 9 AM"
        scheduleType:
          type: string
          enum: [minutely, hourly, daily, weekly, monthly, yearly]
          example: "daily"
        time:
          type: object
          properties:
            hour:
              type: integer
              minimum: 0
              maximum: 23
              example: 9
            minute:
              type: integer
              minimum: 0
              maximum: 59
              example: 0
            dayOfWeek:
              type: integer
              minimum: 0
              maximum: 6
              example: 1
            dayOfMonth:
              type: integer
              minimum: 1
              maximum: 31
              example: 1
            month:
              type: integer
              minimum: 1
              maximum: 12
              example: 1
        maxRuns:
          type: integer
          minimum: 1
          maximum: 1000
          example: 30
        settings:
          type: object
    ScheduleUpdate:
      type: object
      properties:
        name:
          type: string
          example: "Updated Daily Analysis"
        description:
          type: string
          example: "Updated description"
        cronExpression:
          type: string
          example: "0 10 * * *"
        isActive:
          type: boolean
          example: true
        maxRuns:
          type: integer
          minimum: 1
          maximum: 1000
          example: 20
        settings:
          type: object
    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
          example: 1
        limit:
          type: integer
          description: Number of items per page
          example: 10
        total:
          type: integer
          description: Total number of items
          example: 25
        totalPages:
          type: integer
          description: Total number of pages
          example: 3
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
        errors:
          type: array
          items:
            type: string
        error:
          type: string
paths:
  /health:
    get:
      summary: Health check
      description: Check if the server is running
      tags: [ðŸ”“ Public]
      responses:
        200:
          description: Server is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  message:
                    type: string
                    example: "Server is running"
                  timestamp:
                    type: string
                    format: date-time
                  swagger:
                    type: string
                    example: "http://localhost:3000/api-docs"

  /api/auth/login:
    post:
      summary: Login user
      description: Authenticate user and get JWT token
      tags: [ðŸ‘¤ Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: "admin@example.com"
                password:
                  type: string
                  example: "admin123"
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Login successful"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      token:
                        type: string
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/profile:
    get:
      summary: Get user profile
      description: Get current user's profile information
      tags: [ðŸ‘¤ Authentication]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/logout:
    post:
      summary: Logout user
      description: Logout current user session
      tags: [ðŸ‘¤ Authentication]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Logout successful"
        401:
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/logout-all:
    post:
      summary: Logout all sessions
      description: Logout user from all devices/sessions
      tags: [ðŸ‘¤ Authentication]
      security:
        - bearerAuth: []
      responses:
        200:
          description: All sessions logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "All sessions logged out successfully"
        401:
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/register:
    post:
      summary: Register new user (Admin Only)
      description: Create a new user account (only admins can register new users)
      tags: [ðŸ”’ Admin Only]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, email, password, fullName]
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 50
                  pattern: '^[a-zA-Z0-9_]+$'
                  example: "john_doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  minLength: 6
                  maxLength: 100
                  example: "password123"
                fullName:
                  type: string
                  maxLength: 100
                  example: "John Doe"
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User registered successfully"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/youtube/analyze:
    post:
      summary: Analyze YouTube channel from image URLs
      description: Start AI analysis of YouTube channel from image URLs
      tags: [ðŸ‘¤ YouTube Analysis]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                imageUrls:
                  type: array
                  items:
                    type: string
                    format: uri
                  description: Array of image URLs to analyze
                  example:
                    - "https://example.com/youtube-channel-main.jpg"
                    - "https://example.com/youtube-channel-stats.jpg"
      responses:
        202:
          description: Analysis started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Images fetched and analysis started"
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      status:
                        type: string
                        example: "processing"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/youtube/analyze-url:
    post:
      summary: Analyze YouTube channel from URL
      description: Analyze YouTube channel by providing channel URL
      tags: [ðŸ‘¤ YouTube Analysis]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [channelUrl]
              properties:
                channelUrl:
                  type: string
                  format: uri
                  description: YouTube channel URL
                  example: "https://www.youtube.com/@PewDiePie"
      responses:
        202:
          description: Channel analysis started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Channel analysis started"
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      status:
                        type: string
                        example: "processing"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/youtube/status/{id}:
    get:
      summary: Get analysis status
      description: Check the status of a YouTube channel analysis
      tags: [ðŸ‘¤ YouTube Analysis]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Analysis ID
      responses:
        200:
          description: Status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      status:
                        type: string
                        enum: [pending, processing, completed, failed]
                      channelName:
                        type: string
                      imageUrl:
                        type: string
                      error:
                        type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Analysis not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/youtube/result/{id}:
    get:
      summary: Get analysis results
      description: Get completed analysis results for a YouTube channel
      tags: [ðŸ‘¤ YouTube Analysis]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Analysis ID
      responses:
        200:
          description: Results retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/YouTubeChannel'
        400:
          description: Analysis not completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Analysis is processing. Please wait."
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Analysis not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/youtube/channels:
    get:
      summary: Get user's YouTube channels
      description: Get list of all YouTube channel analyses for the authenticated user
      tags: [ðŸ‘¤ YouTube Analysis]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Items per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Channels retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      channels:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            channelName:
                              type: string
                            analysisStatus:
                              type: string
                              enum: [pending, processing, completed, failed]
                            imageUrl:
                              type: string
                            createdAt:
                              type: string
                              format: date-time
                      pagination:
                        type: object
                        properties:
                          currentPage:
                            type: integer
                          totalPages:
                            type: integer
                          totalItems:
                            type: integer
                          itemsPerPage:
                            type: integer
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Add YouTube channel manually
      description: Add a new YouTube channel without AI analysis (manual entry)
      tags: [ðŸ‘¤ YouTube Analysis]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [channelName]
              properties:
                channelName:
                  type: string
                  description: Name of the YouTube channel
                  example: "PewDiePie"
                subscriberCount:
                  type: string
                  description: Number of subscribers
                  example: "111M"
                totalViews:
                  type: string
                  description: Total views on the channel
                  example: "28.5B"
                estimatedRevenue:
                  type: string
                  description: Estimated monthly revenue
                  example: "$50K - $100K"
                watchTime:
                  type: string
                  description: Total watch time
                  example: "2.5B hours"
                views48h:
                  type: string
                  description: Views in last 48 hours
                  example: "500K"
                views60min:
                  type: string
                  description: Views in last 60 minutes
                  example: "10K"
                description:
                  type: string
                  description: Channel description
                  example: "Gaming and entertainment channel"
                category:
                  type: string
                  description: Channel category
                  example: "Gaming"
                joinDate:
                  type: string
                  description: When the channel was created
                  example: "Apr 29, 2010"
                location:
                  type: string
                  description: Channel location
                  example: "United States"
                socialLinks:
                  type: object
                  description: Social media links as JSON object
                  example:
                    twitter: "https://twitter.com/pewdiepie"
                    instagram: "https://instagram.com/pewdiepie"
                imageUrl:
                  type: string
                  description: Channel banner or profile image URL
                  example: "https://example.com/channel-image.jpg"
                monetizationWarning:
                  type: boolean
                  description: Whether channel has monetization warnings
                  example: false
                monetizationWarningReason:
                  type: string
                  description: Reason for monetization warning
                  example: ""
                communityGuidelinesWarning:
                  type: boolean
                  description: Whether channel has community guidelines warnings
                  example: false
                communityGuidelinesWarningReason:
                  type: string
                  description: Reason for community guidelines warning
                  example: ""
      responses:
        201:
          description: Channel added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "YouTube channel added successfully"
                  data:
                    $ref: '#/components/schemas/YouTubeChannel'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/youtube/channels/{id}:
    delete:
      summary: Delete YouTube channel analysis
      description: Delete a YouTube channel analysis and associated files
      tags: [ðŸ‘¤ YouTube Analysis]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Analysis ID
      responses:
        200:
          description: Analysis deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "YouTube channel deleted successfully"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Analysis not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/youtube/channels/{id}/warnings:
    get:
      summary: Get channel warnings
      description: Get all warnings for a channel with status and notes
      tags: [ðŸ‘¤ YouTube Analysis]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Channel ID
        - name: status
          in: query
          description: Filter by warning status
          required: false
          schema:
            type: string
            enum: [unread, read, processing, resolved, ignored]
        - name: active
          in: query
          description: Filter by active status
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: Warnings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      channelId:
                        type: string
                        format: uuid
                      channelName:
                        type: string
                      warnings:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            warningType:
                              type: string
                              enum: [monetization, community_guidelines, copyright, other]
                            status:
                              type: string
                              enum: [unread, read, processing, resolved, ignored]
                            reason:
                              type: string
                            severity:
                              type: string
                              enum: [low, medium, high, critical]
                            warningDate:
                              type: string
                              format: date-time
                            processedAt:
                              type: string
                              format: date-time
                            notes:
                              type: array
                              items:
                                type: object
                                properties:
                                  id:
                                    type: string
                                  content:
                                    type: string
                                  addedBy:
                                    type: string
                                    format: uuid
                                  addedAt:
                                    type: string
                                    format: date-time
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Channel not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/youtube/channels/{id}/warnings/{warningId}/status:
    patch:
      summary: Update warning status
      description: Update the status of a specific warning (read, processing, resolved, ignored)
      tags: [ðŸ‘¤ YouTube Analysis]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Channel ID
        - name: warningId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Warning ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [read, processing, resolved, ignored]
                  description: New status for the warning
                  example: "read"
      responses:
        200:
          description: Warning status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Warning status updated to read"
                  data:
                    type: object
                    properties:
                      warningId:
                        type: string
                        format: uuid
                      status:
                        type: string
                        enum: [read, processing, resolved, ignored]
                      processedAt:
                        type: string
                        format: date-time
        400:
          description: Invalid status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Channel or warning not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/youtube/channels/{id}/statistics:
    get:
      summary: Get channel statistics history
      description: Get historical statistics data for a channel
      tags: [ðŸ‘¤ YouTube Analysis]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Channel ID
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Items per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Statistics history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      statistics:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            subscriberCount:
                              type: string
                            totalViews:
                              type: string
                            estimatedRevenue:
                              type: string
                            watchTime:
                              type: string
                            views48h:
                              type: string
                            views60min:
                              type: string
                            createdAt:
                              type: string
                              format: date-time
                      pagination:
                        type: object
                        properties:
                          currentPage:
                            type: integer
                          totalPages:
                            type: integer
                          totalItems:
                            type: integer
                          itemsPerPage:
                            type: integer
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Channel not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/youtube/channels/{id}/videos:
    get:
      summary: Get channel videos
      description: Get recent videos data for a channel
      tags: [ðŸ‘¤ YouTube Analysis]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Channel ID
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Items per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Videos retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      videos:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            title:
                              type: string
                            views:
                              type: string
                            likes:
                              type: string
                            comments:
                              type: string
                            createdAt:
                              type: string
                              format: date-time
                      pagination:
                        type: object
                        properties:
                          currentPage:
                            type: integer
                          totalPages:
                            type: integer
                          totalItems:
                            type: integer
                          itemsPerPage:
                            type: integer
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Channel not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/youtube/channels/{id}/analyses:
    get:
      summary: Get channel analysis history
      description: Get historical AI analysis data for a channel
      tags: [ðŸ‘¤ YouTube Analysis]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Channel ID
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Items per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Analysis history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      analyses:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            aiAnalysis:
                              type: object
                            analysisStatus:
                              type: string
                              enum: [pending, processing, completed, failed]
                            analysisError:
                              type: string
                            createdAt:
                              type: string
                              format: date-time
                      pagination:
                        type: object
                        properties:
                          currentPage:
                            type: integer
                          totalPages:
                            type: integer
                          totalItems:
                            type: integer
                          itemsPerPage:
                            type: integer
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Channel not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/schedules:
    get:
      summary: Get user schedules
      tags: [ðŸ“… Schedule Management]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive]
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Schedule'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create schedule
      description: Create a new schedule for automated channel analysis
      tags: [ðŸ“… Schedule Management]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [channelId, name, scheduleType, time]
              properties:
                channelId:
                  type: string
                  format: uuid
                  example: "123e4567-e89b-12d3-a456-426614174000"
                name:
                  type: string
                  example: "Daily Analysis"
                description:
                  type: string
                  example: "Analyze channel every day at 9 AM"
                scheduleType:
                  type: string
                  enum: [minutely, hourly, daily, weekly, monthly, yearly]
                  example: "daily"
                time:
                  type: object
                  properties:
                    hour:
                      type: integer
                      minimum: 0
                      maximum: 23
                      example: 9
                    minute:
                      type: integer
                      minimum: 0
                      maximum: 59
                      example: 0
                    dayOfWeek:
                      type: integer
                      minimum: 0
                      maximum: 6
                      example: 1
                    dayOfMonth:
                      type: integer
                      minimum: 1
                      maximum: 31
                      example: 1
                    month:
                      type: integer
                      minimum: 1
                      maximum: 12
                      example: 1
                maxRuns:
                  type: integer
                  minimum: 1
                  maximum: 1000
                  example: 30
                settings:
                  type: object
      responses:
        201:
          description: Schedule created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Schedule'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/schedules/{id}:
    put:
      summary: Update schedule
      tags: [ðŸ“… Schedule Management]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Updated Daily Analysis"
                description:
                  type: string
                  example: "Updated description"
                cronExpression:
                  type: string
                  example: "0 10 * * *"
                isActive:
                  type: boolean
                  example: true
                maxRuns:
                  type: integer
                  minimum: 1
                  maximum: 1000
                  example: 20
                settings:
                  type: object
      responses:
        200:
          description: Schedule updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Schedule'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete schedule
      tags: [ðŸ“… Schedule Management]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Schedule deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/schedules/{id}/execute:
    post:
      summary: Execute schedule manually
      tags: [ðŸ“… Schedule Management]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Schedule executed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users:
    get:
      summary: Get all users
      description: Get paginated list of all users (Admin only)
      tags: [ðŸ”’ Admin Only]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Items per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      pagination:
                        type: object
                        properties:
                          currentPage:
                            type: integer
                          totalPages:
                            type: integer
                          totalItems:
                            type: integer
                          itemsPerPage:
                            type: integer
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/search:
    get:
      summary: Search users
      description: Search users by query, role, and status (Admin only)
      tags: [ðŸ”’ Admin Only]
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          description: Search query (username, email, or fullName)
          required: false
          schema:
            type: string
            example: "john"
        - name: role
          in: query
          description: Filter by user role
          required: false
          schema:
            type: string
            enum: [user, admin]
        - name: isActive
          in: query
          description: Filter by active status
          required: false
          schema:
            type: boolean
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Items per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      pagination:
                        type: object
                        properties:
                          currentPage:
                            type: integer
                          totalPages:
                            type: integer
                          totalItems:
                            type: integer
                          itemsPerPage:
                            type: integer
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{id}:
    get:
      summary: Get user by ID
      description: Get user details by ID
      tags: [ðŸ”’ Admin Only]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        200:
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update user
      description: Update user information
      tags: [ðŸ”’ Admin Only]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 50
                  pattern: '^[a-zA-Z0-9_]+$'
                  description: Username (alphanumeric only)
                  example: "john_doe"
                email:
                  type: string
                  format: email
                  description: Email address
                  example: "john@example.com"
                fullName:
                  type: string
                  minLength: 2
                  maxLength: 100
                  description: Full name
                  example: "John Doe"
                role:
                  type: string
                  enum: [user, admin]
                  description: User role
                  example: "user"
                isActive:
                  type: boolean
                  description: User active status
                  example: true
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User updated successfully"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Validation error"
                  errors:
                    type: array
                    items:
                      type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Email or username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete user
      description: Soft delete user by deactivating (Admin only)
      tags: [ðŸ”’ Admin Only]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        200:
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User deleted successfully"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{id}/toggle-status:
    patch:
      summary: Toggle user status
      description: Activate or deactivate user (Admin only)
      tags: [ðŸ”’ Admin Only]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        200:
          description: User status toggled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User activated successfully"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

tags:
  - name: ðŸ”“ Public
    description: Public endpoints - no authentication required
  - name: ðŸ‘¤ Authentication
    description: User authentication and authorization
  - name: ðŸ‘¤ YouTube Analysis
    description: YouTube channel analysis with AI (user operations)
  - name: ðŸ“… Schedule Management
    description: Schedule management for automated data collection
  - name: ðŸ”’ Admin Only
    description: Admin-only endpoints for user management 