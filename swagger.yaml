openapi: 3.0.0
info:
  title: YouTube Manager API
  version: 1.0.0
  description: OpenAPI spec for YouTube Manager backend (phân nhóm endpoint rõ ràng)
servers:
  - url: http://localhost:3000
    description: Local server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          example: "password123"
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - fullName
      properties:
        email:
          type: string
          format: email
          example: "newuser@example.com"
        password:
          type: string
          example: "password123"
        fullName:
          type: string
          example: "John Doe"
    SyncRevenueRequest:
      type: object
      required:
        - startDate
        - endDate
      properties:
        startDate:
          type: string
          format: date
          example: "2024-01-01"
        endDate:
          type: string
          format: date
          example: "2024-01-31"
        channelId:
          type: string
          example: "UC123456789"
        videoId:
          type: string
          example: "dQw4w9WgXcQ"
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation successful"
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error message"
        error:
          type: string
          example: "Detailed error"
tags:
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: User Management
    description: User management operations (admin only)
  - name: YouTube OAuth
    description: YouTube OAuth2 authentication and authorization
  - name: YouTube Sync
    description: YouTube data synchronization operations
  - name: YouTube Analytics
    description: YouTube analytics and revenue data
paths:

  # ===== AUTHENTICATION =====
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        200:
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Login success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      email:
                        type: string
                        example: "user@example.com"
                      fullName:
                        type: string
                        example: "John Doe"
                      role:
                        type: string
                        example: "user"
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/auth/profile:
    get:
      tags:
        - Authentication
      summary: Get user profile
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      email:
                        type: string
                        example: "user@example.com"
                      fullName:
                        type: string
                        example: "John Doe"
                      role:
                        type: string
                        example: "user"
                      isActive:
                        type: boolean
                        example: true
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/auth/refresh-token:
    post:
      tags:
        - Authentication
      summary: Refresh JWT token
      security:
        - bearerAuth: []
      responses:
        200:
          description: Token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        401:
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout
      security:
        - bearerAuth: []
      responses:
        200:
          description: Logout success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
  /api/auth/logout-all:
    post:
      tags:
        - Authentication
      summary: Logout all sessions
      security:
        - bearerAuth: []
      responses:
        200:
          description: Logout all success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # ===== USER MANAGEMENT (ADMIN) =====
  /api/users:
    get:
      tags:
        - User Management
      summary: Get all users (admin)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Items per page
      responses:
        200:
          description: List users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        email:
                          type: string
                          example: "user@example.com"
                        fullName:
                          type: string
                          example: "John Doe"
                        role:
                          type: string
                          example: "user"
                        isActive:
                          type: boolean
                          example: true
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      total:
                        type: integer
                        example: 25
        403:
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/users/search:
    get:
      tags:
        - User Management
      summary: Search users (admin)
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Search query
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Items per page
      responses:
        200:
          description: Search users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        email:
                          type: string
                          example: "user@example.com"
                        fullName:
                          type: string
                          example: "John Doe"
                        role:
                          type: string
                          example: "user"
                        isActive:
                          type: boolean
                          example: true
        403:
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/users/{id}:
    get:
      tags:
        - User Management
      summary: Get user by id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        200:
          description: User info
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 1
                      email:
                        type: string
                        example: "user@example.com"
                      fullName:
                        type: string
                        example: "John Doe"
                      role:
                        type: string
                        example: "user"
                      isActive:
                        type: boolean
                        example: true
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - User Management
      summary: Update user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  example: "John Doe Updated"
                email:
                  type: string
                  format: email
                  example: "updated@example.com"
      responses:
        200:
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - User Management
      summary: Toggle user status (admin)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        200:
          description: Status toggled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        403:
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - User Management
      summary: Delete user (admin)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        200:
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        403:
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ===== YOUTUBE OAUTH2 & AUTHORIZATION =====
  /api/youtube-auth/auth-url:
    post:
      tags:
        - YouTube OAuth
      summary: Get YouTube OAuth2 URL
      security:
        - bearerAuth: []
      responses:
        200:
          description: OAuth2 URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  authUrl:
                    type: string
                    example: "https://accounts.google.com/o/oauth2/auth?..."
                  message:
                    type: string
                    example: "Authorization URL generated successfully"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/youtube-auth/callback:
    get:
      tags:
        - YouTube OAuth
      summary: OAuth2 callback & sync
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
          description: Authorization code from YouTube
        - name: state
          in: query
          schema:
            type: string
          description: State parameter containing user info
      responses:
        200:
          description: OAuth2 callback handled
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "YouTube authorization successful"
                  hasAnalyticsAccess:
                    type: boolean
                    example: true
        400:
          description: Invalid callback
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/youtube-auth/refresh:
    post:
      tags:
        - YouTube OAuth
      summary: Refresh YouTube access token
      security:
        - bearerAuth: []
      responses:
        200:
          description: Token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Access token refreshed successfully"
                  hasAnalyticsAccess:
                    type: boolean
                    example: true
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: No refresh token found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/youtube-auth/status:
    get:
      tags:
        - YouTube OAuth
      summary: Get YouTube auth status
      security:
        - bearerAuth: []
      responses:
        200:
          description: Status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  isAuthorized:
                    type: boolean
                    example: true
                  hasAnalyticsAccess:
                    type: boolean
                    example: true
                  tokenExpiresAt:
                    type: string
                    format: date-time
                    example: "2024-12-31T23:59:59.000Z"
                  isExpired:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "User authorized with YouTube"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/youtube-auth/revoke:
    delete:
      tags:
        - YouTube OAuth
      summary: Revoke YouTube auth
      security:
        - bearerAuth: []
      responses:
        200:
          description: Revoked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ===== YOUTUBE DATA SYNC =====
  /api/youtube-sync/channel:
    post:
      tags:
        - YouTube Sync
      summary: Sync YouTube channel data
      security:
        - bearerAuth: []
      responses:
        200:
          description: Sync success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Channel data synced successfully"
                  channelsCount:
                    type: integer
                    example: 2
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/youtube-sync/revenue:
    post:
      tags:
        - YouTube Sync
      summary: Sync revenue for channel/video
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyncRevenueRequest'
      responses:
        200:
          description: Revenue sync success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Revenue data synced successfully"
                  syncedRecords:
                    type: integer
                    example: 150
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/youtube-sync/revenue/all-channels:
    post:
      tags:
        - YouTube Sync
      summary: Sync revenue for all user channels
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - startDate
                - endDate
              properties:
                startDate:
                  type: string
                  format: date
                  example: "2024-01-01"
                endDate:
                  type: string
                  format: date
                  example: "2024-01-31"
      responses:
        200:
          description: All revenue sync success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "All channels revenue synced successfully"
                  channelsSynced:
                    type: integer
                    example: 3
                  totalRecords:
                    type: integer
                    example: 450
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/youtube-sync/status:
    get:
      tags:
        - YouTube Sync
      summary: Get sync status
      security:
        - bearerAuth: []
      responses:
        200:
          description: Sync status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  lastSync:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00.000Z"
                  channelsCount:
                    type: integer
                    example: 2
                  videosCount:
                    type: integer
                    example: 45
                  isSyncing:
                    type: boolean
                    example: false
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ===== YOUTUBE ANALYTICS =====
  /api/youtube-analytics/channel/revenue:
    get:
      tags:
        - YouTube Analytics
      summary: Get channel revenue data
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: Start date (YYYY-MM-DD)
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: End date (YYYY-MM-DD)
        - name: channelId
          in: query
          schema:
            type: string
          description: Specific channel ID (optional)
      responses:
        200:
          description: Channel revenue
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                          format: date
                          example: "2024-01-15"
                        revenue:
                          type: number
                          format: float
                          example: 125.50
                        views:
                          type: integer
                          example: 15000
                        channelId:
                          type: string
                          example: "UC123456789"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/youtube-analytics/video/revenue:
    get:
      tags:
        - YouTube Analytics
      summary: Get video revenue data
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: Start date (YYYY-MM-DD)
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: End date (YYYY-MM-DD)
        - name: videoId
          in: query
          schema:
            type: string
          description: Specific video ID (optional)
      responses:
        200:
          description: Video revenue
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                          format: date
                          example: "2024-01-15"
                        revenue:
                          type: number
                          format: float
                          example: 45.75
                        views:
                          type: integer
                          example: 8500
                        videoId:
                          type: string
                          example: "dQw4w9WgXcQ"
                        videoTitle:
                          type: string
                          example: "Amazing Video Title"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/youtube-analytics/aggregated/revenue:
    get:
      tags:
        - YouTube Analytics
      summary: Get aggregated revenue data
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: Start date (YYYY-MM-DD)
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: End date (YYYY-MM-DD)
        - name: groupBy
          in: query
          schema:
            type: string
            enum: [day, week, month]
            default: day
          description: Group by time period
      responses:
        200:
          description: Aggregated revenue
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        period:
                          type: string
                          example: "2024-01-15"
                        totalRevenue:
                          type: number
                          format: float
                          example: 1250.75
                        totalViews:
                          type: integer
                          example: 150000
                        channelCount:
                          type: integer
                          example: 2
                        videoCount:
                          type: integer
                          example: 45
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'